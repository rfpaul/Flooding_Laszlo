/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var champaign = ee.FeatureCollection("users/RobertFPaul/ChampaignCounty"),
    sinks = ee.Image("users/RobertFPaul/Champ_sinks_x10cm"),
    trainers = ee.FeatureCollection("users/RobertFPaul/unified_training_polys"),
    plImage = ee.Image("users/RobertFPaul/PL/2017-05-07_Combined"),
    othersCai = /* color: #ffc82d */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.45067024230957, 40.38185909446202],
                  [-88.45075607299805, 40.36806229792472],
                  [-88.44646453857422, 40.38434352539334]]]),
            {
              "Type": 0,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.45564842224121, 40.38990047339116],
                  [-88.4494686126709, 40.388527622999476],
                  [-88.44852447509766, 40.39016196553099]]]),
            {
              "Type": 0,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.2850170135498, 40.306367212662366],
                  [-88.275146484375, 40.30446901482454],
                  [-88.27334403991699, 40.307545377593996]]]),
            {
              "Type": 0,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.22854042053223, 40.30263622146999],
                  [-88.22253227233887, 40.29929779151697],
                  [-88.22184562683105, 40.30093429740132]]]),
            {
              "Type": 0,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.07241439819336, 40.328487101623004],
                  [-88.07292938232422, 40.321289116629075],
                  [-88.07069778442383, 40.324691896103204]]]),
            {
              "Type": 0,
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.14228057861328, 40.18972553287624],
                  [-88.14301013946533, 40.18825025770172],
                  [-88.13820362091064, 40.1893976967216]]]),
            {
              "Type": 0,
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.13665866851807, 40.18146357860992],
                  [-88.13880443572998, 40.1798241823363],
                  [-88.13618659973145, 40.17966024053021]]]),
            {
              "Type": 0,
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.12876224517822, 40.183463588419485],
                  [-88.12451362609863, 40.183168508712775],
                  [-88.12382698059082, 40.18395538507846]]]),
            {
              "Type": 0,
              "system:index": "7"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.122239112854, 40.17900446934463],
                  [-88.11919212341309, 40.176873169219675],
                  [-88.11790466308594, 40.17792243303196]]]),
            {
              "Type": 0,
              "system:index": "8"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.11957836151123, 40.18303736176448],
                  [-88.12138080596924, 40.181168490204115],
                  [-88.11919212341309, 40.181201277868155]]]),
            {
              "Type": 0,
              "system:index": "9"
            })]),
    waterCai = /* color: #0b4a8b */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.02791118621826, 39.897242532926846],
                  [-88.02743911743164, 39.89699559887164],
                  [-88.02664518356323, 39.897110834874795]]]),
            {
              "Type": 1,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.0230188369751, 39.89730838185796],
                  [-88.02334070205688, 39.897012061169654],
                  [-88.0230188369751, 39.89683097567387],
                  [-88.0223536491394, 39.897258995165544]]]),
            {
              "Type": 1,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-87.99893260002136, 39.889792964171875],
                  [-87.99775242805481, 39.88950484304073],
                  [-87.99764513969421, 39.88972710802008]]]),
            {
              "Type": 1,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.00142168998718, 39.89011401200581],
                  [-88.00100326538086, 39.88992467628564],
                  [-88.00074577331543, 39.89004815616246]]]),
            {
              "Type": 1,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.0159592628479, 39.963849279289605],
                  [-88.01632404327393, 39.96353680021076],
                  [-88.01548719406128, 39.96332299791291],
                  [-88.01477909088135, 39.96332299791291],
                  [-88.01475763320923, 39.96393151038878]]]),
            {
              "Type": 1,
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.012375831604, 39.96220463653672],
                  [-88.01252603530884, 39.961678342500576],
                  [-88.01153898239136, 39.96231976281713]]]),
            {
              "Type": 1,
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.33660125732422, 40.33789240232525],
                  [-88.3364725112915, 40.337352655307896],
                  [-88.33615064620972, 40.33707460212904],
                  [-88.33617210388184, 40.337712487132556]]]),
            {
              "Type": 1,
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.40480446815491, 40.286670816006776],
                  [-88.40397834777832, 40.28698999739962],
                  [-88.40394616127014, 40.28750559492728],
                  [-88.40472936630249, 40.287366465823155],
                  [-88.40515851974487, 40.28674447338505]]]),
            {
              "Type": 1,
              "system:index": "7"
            })]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Robert F Paul
// Classification of water cover in Planet Labs 

var currentDate = '2017-05-07';

var upper_mean = 12000; // upper bound mean band value to cut off clouds
var lower_mean = 2000; // lower bound mean band value to cut off cloud shadows
var buffer_shadow_dist = 150; // cloud shadow buffer distance (in m)

// Create a mask of all pixels matching CDL crop class indices
// for the specified years within the extent
var CDL_Mask = function(years, crops, extent) {
  var result_img;
  
  // Get the CDL image for the year
  var FetchCDLYear = function(year) {
    // Start and end dates
    var start = ee.Date.fromYMD(year, 01, 01);
    var end = ee.Date.fromYMD(year, 12, 31);
    // Get the cropland layer for the year
    var result = ee.ImageCollection('USDA/NASS/CDL')
      .filterDate(start,end)
      .select('cropland') // Get the cropland cover values
      .first(); // Specifically get the image
    // Clip to extent geometry
    result = ee.Image(result).clip(extent);
    //print(result)
    return FetchCovers(result);
  }
  
  // Specified land covers = 1, all others = 0
  var FetchCovers = function(image) {
    // Remap cover ID values as 1, everything else as 0
    var result = image.remap(crops, // from
      ee.List.repeat(1, crops.length), // to
      0); // default value
    return result;
  }  
  
  // Mask from the union of all specified crop types for specified years
  result_img = ee.ImageCollection(years.map(FetchCDLYear)).and();
  
  // Return resulting mask
  return result_img;
}

// Remove clouds and shadows, by taking the mean of all bands then
// dropping a buffered distance around a specified upper limit of "dark" pixels
// and dropping everything above an upper threshold
var Obscuration_Mask = function(image, cloud_thresh, shadow_thresh, bufferDist) {
  // print(image);
  // Get the mean of all bands
  var band_mean = image.reduce(ee.Reducer.mean());
  // Clouds are bright, get everything below a high value theshold
  var not_clouds = band_mean.lt(cloud_thresh).byte();
  
  Map.addLayer(band_mean,
    {min:shadow_thresh, max: cloud_thresh, palette: ['red', 'black', 'gray', 'white', 'blue']},
    "Mean values"); // */
  //Map.addLayer(not_clouds, {min: 0, max: 1}, "Not clouds");
  
  // For everything below this shadow value...  
  var shadow_mask = band_mean.lte(shadow_thresh).byte();

  // Measure the distance to the closest pixel below this threshold
  var cloud_mask = shadow_mask.fastDistanceTransform(100).sqrt().multiply(ee.Image.pixelArea().sqrt());
  
  //Map.addLayer(cloud_mask, {min:0, max: bufferDist}, "Buffered"); // Distance
  
  // Distance measurement to buffered mask around the shadows
  cloud_mask = cloud_mask
    .where(cloud_mask.lte(bufferDist), 0)
    .where(cloud_mask.gt(bufferDist), 1)
    .byte(); // */
  
  // Include the mask for the cloud shadows too
  cloud_mask = cloud_mask.and(not_clouds).byte();
  
  return cloud_mask;
}

// Load Cropland Data Layer of maize and soybeans plots plus water cover in 2017
// Change champaign to clip region
var cdl_cult = CDL_Mask([2017], [1, 5, 111], champaign);
//print(cdl_cult);

// Define visualization parameters for a false color image.
// R is red, NIR is green, B is blue
var vizParams = {'bands': ['b1', 'b4', 'b3'], 'min':2000, 'max': 8000, 'gamma': 1.2};

// Mask image
var masked_pl = plImage.updateMask(cdl_cult);
// Clip to region of interest
masked_pl = masked_pl.clip(champaign);

// Mask of cloud shadow + buffer
var shade_mask = Obscuration_Mask(
  masked_pl, // image
  upper_mean, // upper bound mean band value to cut off clouds
  lower_mean, // lower bound mean band value to cut off cloud shadows
  buffer_shadow_dist // cloud shadow buffer distance
  );

// masked_pl = masked_pl.updateMask(shade_mask); // 

// Mask the area of interest where the shadows are
var aoi_mask = cdl_cult.and(shade_mask);
// Mask out 0 values of the original image, cast image as 8-bit int
aoi_mask = aoi_mask.and(plImage.gt(0)).byte();

masked_pl = masked_pl.updateMask(aoi_mask); // 

// Get the trainers associated with water vs not water cover for this date
var date_filtered = trainers.filter(ee.Filter.eq('date', currentDate));
var training_day = date_filtered.select('class');
var training_bands = ['b1', 'b2', 'b3', 'b4']

print(training_day);

// Create the sampling raster with an added "class" band
var sample_pl = masked_pl.clipToCollection(training_day);
sample_pl = ee.Image([sample_pl, 
  ee.Image()
    .byte()
    .paint(training_day, 'class')
    .rename('class')]);
print(sample_pl);
/*
// Sample pixels for classification
//var training = masked_pl.reduceRegions(training_day, ee.Reducer.mean());
var training = masked_pl.select(training_bands)
  .sample({region: training_day, numPixels: 50})
  .limit(50);
//  tileScale: 16});
var training = sample_pl.stratifiedSample({ numPoints: 50, // value overridden
  classBand: 'class', 
  region: training_day,
  scale: 6,
  classValues: [0, 1], // cover values to sample from 
  classPoints: [4500, 500] // sample
});
print(training);
// Train the classifier.
var classifier = ee.Classifier.randomForest({
  numberOfTrees: 30
})
  .train(training, "class", training_bands);
print(classifier);
// Apply the classifier to the masked Planet Labs image
var classed_pl = masked_pl.classify(classifier).byte();
// Recast classified image as 8-bit depth integer
//classed_pl = classed_pl.toInt8();

// Confusion matrix for classification
var trainAcc = classifier.confusionMatrix();
print('Confusion matrix: ', trainAcc.array());
print('Training overall accuracy: ', trainAcc.accuracy());
print('Consumers Accuracy', trainAcc.consumersAccuracy());
print('Producers Accuracy', trainAcc.producersAccuracy());
print('Kappa', trainAcc.kappa());
// */

// Draw to map
//Map.setCenter(-94.866,42.967, 8);
//Map.setCenter(-96.37, 48.29, 8);
//Map.addLayer(cdl_cult);
Map.addLayer(masked_pl, vizParams, "Planet Labs");
//Map.addLayer(shade_mask, {min: 0, max: 1}, "Cloud shadow mask")
//Map.addLayer(sample_pl, vizParams, "Sample Raster");
//Map.addLayer(training_day, {}, "Trainer Polys");
//Map.addLayer(sample_pl, {}, "Sample Points");
//Map.addLayer(training, {}, "Trainer Points")
//Map.addLayer(classed_pl, {min: 0, max: 1, palette: ["a93f26","1fc1ff"]}, "Classification");

//Export image. Uncomment this when ready to export data.
Export.image.toCloudStorage({
  image: masked_pl,
  description: currentDate + '_PL_Masked_Raw',
  bucket: 'gee_export_kovi',
  fileNamePrefix: 'PL/Raw/' + currentDate + '_cbw_masked-mosaic_3m',
  scale: 3,
  crs: "EPSG:32616",
  region: champaign,
  maxPixels: 1e13
});
// 

Export.image.toCloudStorage({
  image: aoi_mask,
  description: currentDate + '_PL_AOI_Mask',
  bucket: 'gee_export_kovi',
  fileNamePrefix: 'PL/Masks/' + currentDate + '_cbw_viz-mask_3m_int8',
  scale: 3,
  crs: "EPSG:32616",
  region: champaign,
  maxPixels: 1e13
});
//

// Export accuracy statistics
/*var cm = ee.Feature(null, 
  {matrix: trainAcc.array(),
    overall_accuracy: trainAcc.accuracy(),
    consumer_accuracy: trainAcc.consumersAccuracy(),
    producer_accuracy: trainAcc.producersAccuracy(),
    kappa: trainAcc.kappa()});

Export.table.toCloudStorage({
  collection: ee.FeatureCollection(cm),
  description: currentDate + '_Classification_Accuracy',
  bucket: 'gee_export_kovi',
  fileNamePrefix: 'PL/Accuracy/' + currentDate + '_RandomForests30_Accuracy_',
  fileFormat: 'CSV'
});
// */

// Export trainer geometries
// Set the "source" property of the trainer geometries
date_filtered = date_filtered.map(function (feat) { return feat.set({"source":"Paul"}); });

// Set the "source", "class", and "date" properties of the trainers from Yaping
waterCai = waterCai.map(function (feat) { return feat.set({"source":"Cai"}); });
waterCai = waterCai.map(function (feat) { return feat.set({"class":1}); });
waterCai = waterCai.map(function (feat) { return feat.set({"date":currentDate}); });
othersCai = othersCai.map(function (feat) { return feat.set({"source":"Cai"}); });
othersCai = othersCai.map(function (feat) { return feat.set({"class":0}); });
othersCai = othersCai.map(function (feat) { return feat.set({"date":currentDate}); });

// Merge the polygons
var trainOut = date_filtered.merge(waterCai);
trainOut = trainOut.merge(othersCai);
// Select specific properties from the FeatureCollection
trainOut = trainOut.select(["date", "class", "cover", "hidden", "source"]);

print(trainOut);

Export.table.toCloudStorage({
  collection: ee.FeatureCollection(trainOut),
  description: currentDate + '_Trainers',
  bucket: 'gee_export_kovi',
  fileNamePrefix: 'PL/Geometry/' + currentDate + '_Trainers_Combined_',
  fileFormat: 'GeoJSON'
});
// */
