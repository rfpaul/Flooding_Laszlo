/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var champaign = ee.FeatureCollection("users/RobertFPaul/ChampaignCounty"),
    plImage = ee.Image("users/RobertFPaul/PL/2017-05-06_Combined");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Robert F Paul
// Classification of water cover in Planet Labs 

var currentDate = '2017-05-06';

// Create a mask of all pixels matching CDL crop class indices
// for the specified years within the extent
var CDL_Mask = function(years, crops, extent) {
  var result_img;
  
  // Get the CDL image for the year
  var FetchCDLYear = function(year) {
    // Start and end dates
    var start = ee.Date.fromYMD(year, 01, 01);
    var end = ee.Date.fromYMD(year, 12, 31);
    // Get the cropland layer for the year
    var result = ee.ImageCollection('USDA/NASS/CDL')
      .filterDate(start,end)
      .select('cropland') // Get the cropland cover values
      .first(); // Specifically get the image
    // Clip to extent geometry
    result = ee.Image(result).clip(extent);
    //print(result)
    return FetchCovers(result);
  }
  
  // Specified land covers = 1, all others = 0
  var FetchCovers = function(image) {
    // Remap cover ID values as 1, everything else as 0
    var result = image.remap(crops, // from
      ee.List.repeat(1, crops.length), // to
      0); // default value
    return result;
  }  
  
  // Mask from the union of all specified crop types for specified years
  result_img = ee.ImageCollection(years.map(FetchCDLYear)).and();
  
  // Return resulting mask
  return result_img;
}

// Remove clouds and shadows, by dropping a buffered distance around 
// a specified percentage of "dark" pixels and dropping
// high mean values
var Shadow_Mask = function(image, threshold, bufferDist, extent) {
  // print(image);
  // Get the mean of all bands
  var cloud_mask = image.reduce(ee.Reducer.mean());
  var not_clouds = cloud_mask.lt(7000).byte();
  
  Map.addLayer(cloud_mask, {min:2000, max: 8000, palette: ['violet', 'orange', 'yellow']}, "Mean values");
  Map.addLayer(not_clouds, {min: 0, max: 1}, "Not clouds");
  
  // Get the n-th percentile value for the means
  var percentiles = cloud_mask.reduceRegion({
    reducer: ee.Reducer.percentile([threshold]),
    geometry: extent,
    scale: 30, // 3m x 10
    maxPixels: 1e12
  });
  // For everything below this percentile...  
  cloud_mask = cloud_mask.lte(ee.Image.constant(percentiles.get("mean")));
  // Focal minimum around mask
  //cloud_mask = cloud_mask.focal_min({kernelType: 'square', radius: bufferDist, units: "meters"});

  // Measure the distance to the closest pixel below this threshold
  cloud_mask = cloud_mask.fastDistanceTransform(100).sqrt().multiply(ee.Image.pixelArea().sqrt());
  
  //Map.addLayer(cloud_mask, {min:0, max: bufferDist}, "Buffered"); // Distance
  
  cloud_mask = cloud_mask
    .where(cloud_mask.lte(bufferDist), 0)
    .where(cloud_mask.gt(bufferDist), 1)
    .byte(); // */
  cloud_mask = cloud_mask.and(not_clouds).byte();
  
  return cloud_mask
}

// Load Cropland Data Layer of maize and soybeans plots from 2013-2016
// Change champaign to clip region
var cdl_cult = CDL_Mask([2017], [1, 5], champaign);
//print(cdl_cult);

// Define visualization parameters for a false color image.
// R is red, NIR is green, B is blue
var vizParams = {'bands': ['b1', 'b4', 'b3'], 'min':2000, 'max': 8000, 'gamma': 1.2};

// Mask image
var masked_pl = plImage.updateMask(cdl_cult);
// Clip to region of interest
masked_pl = masked_pl.clip(champaign);

// Mask of cloud shadow + buffer
var shade_mask = Shadow_Mask(
  masked_pl, // image
  0.05, // percentile
  150, // buffer distance, in meters
  champaign // AOI
  );

// Mask the area of interest where the shadows are
var aoi_mask = cdl_cult.and(shade_mask);
// Mask out 0 values of the original image, cast image as 8-bit int
aoi_mask = aoi_mask.and(plImage.reduce(ee.Reducer.max()).gt(0)).byte();

masked_pl = masked_pl.updateMask(aoi_mask); // */

// Draw to map
//Map.setCenter(-94.866,42.967, 8);
//Map.setCenter(-96.37, 48.29, 8);*/
//Map.addLayer(cdl_cult);
Map.addLayer(masked_pl, vizParams, "Planet Labs");
Map.addLayer(aoi_mask, {min: 0, max: 1}, "AOI mask");

//Export image and mask. Uncomment this when ready to export data.
/*Export.image.toCloudStorage({
  image: aoi_mask,
  description: '2017_05_06_Mask_PlanetLabs',
  bucket: 'gee_export_kovi',
  fileNamePrefix: 'PL/masks/2017-05-06_3m_cb_cover-mask_int8',
  scale: 3,
  crs: "EPSG:32616",
  region: champaign,
  maxPixels: 1e13
}); // */