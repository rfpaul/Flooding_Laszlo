/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var champaign = ee.FeatureCollection("users/RobertFPaul/ChampaignCounty"),
    sinks = ee.Image("users/RobertFPaul/Champ_sinks_x10cm"),
    trainers = ee.FeatureCollection("users/RobertFPaul/unified_training_polys"),
    plImage = ee.Image("users/RobertFPaul/PL/2017-05-05_Combined"),
    waterCai = /* color: #bf04c2 */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.25917823044949, 39.918310342555706],
                  [-88.25932843415433, 39.917997655444594],
                  [-88.25877053467923, 39.91827742819018],
                  [-88.25881345002347, 39.91850782841657]]]),
            {
              "Type": 1,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.26340539185696, 39.91728998986852],
                  [-88.26308352677518, 39.91712541543066],
                  [-88.26321227280789, 39.91733936212274]]]),
            {
              "Type": 1,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.26001507966214, 39.93221524662697],
                  [-88.26027257172757, 39.9319026230157],
                  [-88.25999362199002, 39.93165581389292]]]),
            {
              "Type": 1,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.24970701783855, 39.927509287566984],
                  [-88.24951389878947, 39.927114367198115],
                  [-88.24944952577312, 39.92742701267801]]]),
            {
              "Type": 1,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.26863268464763, 39.925106820098186],
                  [-88.268160615861, 39.9247777083999],
                  [-88.26809624284465, 39.925040997885105]]]),
            {
              "Type": 1,
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.32048471700756, 39.92213785091907],
                  [-88.32117136251537, 39.921018816166914],
                  [-88.31966932546703, 39.921611248607924]]]),
            {
              "Type": 1,
              "system:index": "5"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.32649286520092, 39.92207202585166],
                  [-88.32644994985668, 39.9216770741183],
                  [-88.32541998159496, 39.92164416137101]]]),
            {
              "Type": 1,
              "system:index": "6"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.40264908439713, 39.88397262869571],
                  [-88.40292803413467, 39.88374211231818],
                  [-88.40237013465958, 39.88380797421942]]]),
            {
              "Type": 1,
              "system:index": "7"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.40361467964249, 39.8826471489413],
                  [-88.4039043582161, 39.88240839520623],
                  [-88.40372196800308, 39.88235899777794],
                  [-88.40366832382279, 39.88254835439314]]]),
            {
              "Type": 1,
              "system:index": "8"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.42634620621277, 39.95882821111489],
                  [-88.42606725647522, 39.95826899595449],
                  [-88.4260457988031, 39.95886110598192]]]),
            {
              "Type": 1,
              "system:index": "9"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.3811613504136, 40.04610583655664],
                  [-88.38129009644632, 40.04567874813812],
                  [-88.38017429749613, 40.04541592316604],
                  [-88.38056053559427, 40.04594157209694]]]),
            {
              "Type": 1,
              "system:index": "10"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.38280440316663, 40.04985797357562],
                  [-88.38253618226514, 40.05053141665212],
                  [-88.38289023385511, 40.05044928980389]]]),
            {
              "Type": 1,
              "system:index": "11"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.38274317325573, 40.089400848087294],
                  [-88.38232474864941, 40.0892859360662],
                  [-88.38229256214123, 40.0895157599144],
                  [-88.38249641002636, 40.08947471999843]]]),
            {
              "Type": 1,
              "system:index": "12"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.18932316033425, 39.95266052385834],
                  [-88.18906566826882, 39.95345006750141],
                  [-88.19056770531716, 39.95384483590511],
                  [-88.19065353600564, 39.95295660379257]]]),
            {
              "Type": 1,
              "system:index": "13"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.19563171593728, 39.9589766178011],
                  [-88.19541713921609, 39.95792397598591],
                  [-88.19503090111795, 39.95864766897449]]]),
            {
              "Type": 1,
              "system:index": "14"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.19734832970681, 39.95790752832899],
                  [-88.1976165506083, 39.9572413948988],
                  [-88.19738051621499, 39.95715915575372]]]),
            {
              "Type": 1,
              "system:index": "15"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.16484872582521, 40.07382010294483],
                  [-88.16502038720216, 40.07306479042896],
                  [-88.16463414910402, 40.07194822614834],
                  [-88.16437665703859, 40.072703551047184]]]),
            {
              "Type": 1,
              "system:index": "16"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.16630799738567, 40.07613504714387],
                  [-88.16635091272991, 40.075634260065215],
                  [-88.16548187700909, 40.07608578956175],
                  [-88.16576082674663, 40.076233562201274]]]),
            {
              "Type": 1,
              "system:index": "17"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.12369740830422, 40.12117113544076],
                  [-88.12026418076516, 40.12107268542303],
                  [-88.12112248764993, 40.121630566971916]]]),
            {
              "Type": 1,
              "system:index": "18"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.1681588598168, 40.177199226734],
                  [-88.16880258998037, 40.177199226734],
                  [-88.16863092860342, 40.176740170919906],
                  [-88.16747221430899, 40.176871330040825]]]),
            {
              "Type": 1,
              "system:index": "19"
            })]),
    othersCai = /* color: #ff0000 */ee.FeatureCollection(
        [ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.29335941986159, 40.38208417560252],
                  [-88.29142822937087, 40.37698428418764],
                  [-88.29125656799391, 40.375807331344916],
                  [-88.28988327697829, 40.37610157148296],
                  [-88.29108490661696, 40.37976311904469],
                  [-88.2925869436653, 40.3814630556279]]]),
            {
              "Type": 0,
              "system:index": "0"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.22887060100567, 40.37304961118796],
                  [-88.22337743694317, 40.371333114527026],
                  [-88.22327014858257, 40.372477450492326],
                  [-88.22872039730083, 40.37474971716209]]]),
            {
              "Type": 0,
              "system:index": "1"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.19878639321229, 40.39124177186218],
                  [-88.20393623452088, 40.387319346046965],
                  [-88.19809974770448, 40.38849609777846],
                  [-88.20067466835877, 40.38895371789929]]]),
            {
              "Type": 0,
              "system:index": "2"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.15290781446913, 40.391564669480054],
                  [-88.14953895994643, 40.38963618124884],
                  [-88.15314883545051, 40.391969856741596]]]),
            {
              "Type": 0,
              "system:index": "3"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.15145464516837, 40.378543051767316],
                  [-88.14760299302299, 40.37959736350487],
                  [-88.14854713059623, 40.37987524137051],
                  [-88.1517121372338, 40.37881276099159]]]),
            {
              "Type": 0,
              "system:index": "4"
            }),
        ee.Feature(
            ee.Geometry.Polygon(
                [[[-88.07250189024376, 40.34530430831518],
                  [-88.07393955427574, 40.34399596699501],
                  [-88.0717723293917, 40.34239321429443],
                  [-88.06943344313072, 40.34550055732448],
                  [-88.07125734526085, 40.34560721774102]]]),
            {
              "Type": 0,
              "system:index": "5"
            })]);
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Robert F Paul
// Classification of water cover in Planet Labs 

var currentDate = '2017-05-05';

var upper_mean = 7500; // upper bound mean band value to cut off clouds
var lower_mean = 3600; // lower bound mean band value to cut off cloud shadows
var buffer_shadow_dist = 150; // cloud shadow buffer distance (in m)

// Create a mask of all pixels matching CDL crop class indices
// for the specified years within the extent
var CDL_Mask = function(years, crops, extent) {
  var result_img;
  
  // Get the CDL image for the year
  var FetchCDLYear = function(year) {
    // Start and end dates
    var start = ee.Date.fromYMD(year, 01, 01);
    var end = ee.Date.fromYMD(year, 12, 31);
    // Get the cropland layer for the year
    var result = ee.ImageCollection('USDA/NASS/CDL')
      .filterDate(start,end)
      .select('cropland') // Get the cropland cover values
      .first(); // Specifically get the image
    // Clip to extent geometry
    result = ee.Image(result).clip(extent);
    //print(result)
    return FetchCovers(result);
  }
  
  // Specified land covers = 1, all others = 0
  var FetchCovers = function(image) {
    // Remap cover ID values as 1, everything else as 0
    var result = image.remap(crops, // from
      ee.List.repeat(1, crops.length), // to
      0); // default value
    return result;
  }  
  
  // Mask from the union of all specified crop types for specified years
  result_img = ee.ImageCollection(years.map(FetchCDLYear)).and();
  
  // Return resulting mask
  return result_img;
}

// Remove clouds and shadows, by taking the mean of all bands then
// dropping a buffered distance around a specified upper limit of "dark" pixels
// and dropping everything above an upper threshold
var Obscuration_Mask = function(image, cloud_thresh, shadow_thresh, bufferDist) {
  // print(image);
  // Get the mean of all bands
  var band_mean = image.reduce(ee.Reducer.mean());
  // Clouds are bright, get everything below a high value theshold
  var not_clouds = band_mean.lt(cloud_thresh).byte();
  
  Map.addLayer(band_mean,
    {min:shadow_thresh, max: cloud_thresh, palette: ['black', 'gray', 'white', 'blue']},
    "Mean values"); // */
  //Map.addLayer(not_clouds, {min: 0, max: 1}, "Not clouds");
  
  // For everything below this shadow value...  
  var shadow_mask = band_mean.lte(shadow_thresh).byte();

  // Measure the distance to the closest pixel below this threshold
  var cloud_mask = shadow_mask.fastDistanceTransform(100).sqrt().multiply(ee.Image.pixelArea().sqrt());
  
  //Map.addLayer(cloud_mask, {min:0, max: bufferDist}, "Buffered"); // Distance
  
  // Distance measurement to buffered mask around the shadows
  cloud_mask = cloud_mask
    .where(cloud_mask.lte(bufferDist), 0)
    .where(cloud_mask.gt(bufferDist), 1)
    .byte(); // */
  
  // Include the mask for the cloud shadows too
  cloud_mask = cloud_mask.and(not_clouds).byte();
  
  return cloud_mask;
}

// Load Cropland Data Layer of maize and soybeans plots plus water cover in 2017
// Change champaign to clip region
var cdl_cult = CDL_Mask([2017], [1, 5, 111], champaign);
//print(cdl_cult);

// Define visualization parameters for a false color image.
// R is red, NIR is green, B is blue
var vizParams = {'bands': ['b1', 'b4', 'b3'], 'min':2000, 'max': 8000, 'gamma': 1.2};

// Mask image
var masked_pl = plImage.updateMask(cdl_cult);
// Clip to region of interest
masked_pl = masked_pl.clip(champaign);

// Mask of cloud shadow + buffer
var shade_mask = Obscuration_Mask(
  masked_pl, // image
  upper_mean, // upper bound mean band value to cut off clouds
  lower_mean, // lower bound mean band value to cut off cloud shadows
  buffer_shadow_dist // cloud shadow buffer distance
  );

// masked_pl = masked_pl.updateMask(shade_mask); // 

// Mask the area of interest where the shadows are
var aoi_mask = cdl_cult.and(shade_mask);
// Mask out 0 values of the original image, cast image as 8-bit int
aoi_mask = aoi_mask.and(plImage.gt(0)).byte();

masked_pl = masked_pl.updateMask(aoi_mask); // 

// Get the trainers associated with water vs not water cover for this date
var date_filtered = trainers.filter(ee.Filter.eq('date', currentDate));
var training_day = date_filtered.select('class');
var training_bands = ['b1', 'b2', 'b3', 'b4']

print(training_day);

// Create the sampling raster with an added "class" band
var sample_pl = masked_pl.clipToCollection(training_day);
sample_pl = ee.Image([sample_pl, 
  ee.Image()
    .byte()
    .paint(training_day, 'class')
    .rename('class')]);
print(sample_pl);
/*
// Sample pixels for classification
//var training = masked_pl.reduceRegions(training_day, ee.Reducer.mean());
var training = masked_pl.select(training_bands)
  .sample({region: training_day, numPixels: 50})
  .limit(50);
//  tileScale: 16});
var training = sample_pl.stratifiedSample({ numPoints: 50, // value overridden
  classBand: 'class', 
  region: training_day,
  scale: 6,
  classValues: [0, 1], // cover values to sample from 
  classPoints: [4500, 500] // sample
});
print(training);
// Train the classifier.
var classifier = ee.Classifier.randomForest({
  numberOfTrees: 30
})
  .train(training, "class", training_bands);
print(classifier);
// Apply the classifier to the masked Planet Labs image
var classed_pl = masked_pl.classify(classifier).byte();
// Recast classified image as 8-bit depth integer
//classed_pl = classed_pl.toInt8();

// Confusion matrix for classification
var trainAcc = classifier.confusionMatrix();
print('Confusion matrix: ', trainAcc.array());
print('Training overall accuracy: ', trainAcc.accuracy());
print('Consumers Accuracy', trainAcc.consumersAccuracy());
print('Producers Accuracy', trainAcc.producersAccuracy());
print('Kappa', trainAcc.kappa());
// */

// Draw to map
//Map.setCenter(-94.866,42.967, 8);
//Map.setCenter(-96.37, 48.29, 8);
//Map.addLayer(cdl_cult);
Map.addLayer(masked_pl, vizParams, "Planet Labs");
//Map.addLayer(shade_mask, {min: 0, max: 1}, "Cloud shadow mask")
//Map.addLayer(sample_pl, vizParams, "Sample Raster");
//Map.addLayer(training_day, {}, "Trainer Polys");
//Map.addLayer(sample_pl, {}, "Sample Points");
//Map.addLayer(training, {}, "Trainer Points")
//Map.addLayer(classed_pl, {min: 0, max: 1, palette: ["a93f26","1fc1ff"]}, "Classification");

//Export image. Uncomment this when ready to export data.
Export.image.toCloudStorage({
  image: masked_pl,
  description: currentDate + '_PL_Masked_Raw',
  bucket: 'gee_export_kovi',
  fileNamePrefix: 'PL/Raw/' + currentDate + '_cbw_masked-mosaic_3m',
  scale: 3,
  crs: "EPSG:32616",
  region: champaign,
  maxPixels: 1e13
});
// 

Export.image.toCloudStorage({
  image: aoi_mask,
  description: currentDate + '_PL_AOI_Mask',
  bucket: 'gee_export_kovi',
  fileNamePrefix: 'PL/Masks/' + currentDate + '_cbw_viz-mask_3m_int8',
  scale: 3,
  crs: "EPSG:32616",
  region: champaign,
  maxPixels: 1e13
});
//

// Export accuracy statistics
/*var cm = ee.Feature(null, 
  {matrix: trainAcc.array(),
    overall_accuracy: trainAcc.accuracy(),
    consumer_accuracy: trainAcc.consumersAccuracy(),
    producer_accuracy: trainAcc.producersAccuracy(),
    kappa: trainAcc.kappa()});

Export.table.toCloudStorage({
  collection: ee.FeatureCollection(cm),
  description: currentDate + '_Classification_Accuracy',
  bucket: 'gee_export_kovi',
  fileNamePrefix: 'PL/Accuracy/' + currentDate + '_RandomForests30_Accuracy_',
  fileFormat: 'CSV'
});
// */

// Export trainer geometries
// Set the "source" property of the trainer geometries
date_filtered = date_filtered.map(function (feat) { return feat.set({"source":"Paul"}); });

// Set the "source", "class", and "date" properties of the trainers from Yaping
waterCai = waterCai.map(function (feat) { return feat.set({"source":"Cai"}); });
waterCai = waterCai.map(function (feat) { return feat.set({"class":1}); });
waterCai = waterCai.map(function (feat) { return feat.set({"date":currentDate}); });
othersCai = othersCai.map(function (feat) { return feat.set({"source":"Cai"}); });
othersCai = othersCai.map(function (feat) { return feat.set({"class":0}); });
othersCai = othersCai.map(function (feat) { return feat.set({"date":currentDate}); });

// Merge the polygons
var trainOut = date_filtered.merge(waterCai);
trainOut = trainOut.merge(othersCai);

print(trainOut);

Export.table.toCloudStorage({
  collection: ee.FeatureCollection(trainOut),
  description: currentDate + '_Trainers',
  bucket: 'gee_export_kovi',
  fileNamePrefix: 'PL/Geometry/' + currentDate + '_Trainers_Combined_',
  fileFormat: 'GeoJSON'
});
// */
