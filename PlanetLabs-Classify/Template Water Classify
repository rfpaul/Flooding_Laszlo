/**** Start of imports. If edited, may not auto-convert in the playground. ****/
var champaign = ee.FeatureCollection("users/RobertFPaul/ChampaignCounty"),
    sinks = ee.Image("users/RobertFPaul/Champ_sinks_x10cm"),
    trainers = ee.FeatureCollection("users/RobertFPaul/unified_training_polys"),
    plImage = ee.Image("users/RobertFPaul/PL/2017-05-05_Combined");
/***** End of imports. If edited, may not auto-convert in the playground. *****/
// Robert F Paul
// Classification of water cover in Planet Labs 
// Template

// Create a mask of all pixels matching CDL crop class indices
// for the specified years within the extent
var CDL_Mask = function(years, crops, extent) {
  var result_img;
  
  // Get the CDL image for the year
  var FetchCDLYear = function(year) {
    // Start and end dates
    var start = ee.Date.fromYMD(year, 01, 01);
    var end = ee.Date.fromYMD(year, 12, 31);
    // Get the cropland layer for the year
    var result = ee.ImageCollection('USDA/NASS/CDL')
      .filterDate(start,end)
      .select('cropland') // Get the cropland cover values
      .first(); // Specifically get the image
    // Clip to extent geometry
    result = ee.Image(result).clip(extent);
    //print(result)
    return FetchCovers(result);
  }
  
  // Specified land covers = 1, all others = 0
  var FetchCovers = function(image) {
    // Remap cover ID values as 1, everything else as 0
    var result = image.remap(crops, // from
      ee.List.repeat(1, crops.length), // to
      0); // default value
    return result;
  }  
  
  // Mask from the union of all specified crop types for specified years
  result_img = ee.ImageCollection(years.map(FetchCDLYear)).and();
  
  // Return resulting mask
  return result_img;
}

print(trainers);

// Load Cropland Data Layer of maize and soybeans plots from 2013-2016
// Change champaign to clip region
var cdl_cult = CDL_Mask([2017], [1, 5, 111], champaign);
print(cdl_cult);

// Define visualization parameters for a false color image.
// R is red, NIR is green, B is blue
var vizParams = {'bands': ['b1', 'b4', 'b3'], 'max': .8, 'gamma': 1.6};

// Mask image
var masked_pl = plImage.updateMask(cdl_cult);
// Clip to region of interest
masked_pl = masked_pl.clip(champaign);

/*print(vegetation);

// Merge classifier points
var sites = vegetation.merge(water).merge(soil).merge(mixed_soil_veg);
//var sites = ee.FeatureCollection([vegetation, soil, mixed_soil_veg, water]).flatten();
// Sample pixels for classification
var training = masked_lsat.sampleRegions(sites, ["class"], 30);
// Train the classifier
var classifier = ee.Classifier.randomForest().train(training, "class", LC8_BANDS);
// Apply the classifier to the masked Landsat image
var classed_lsat = masked_lsat.classify(classifier);
// Remap values to prevent category 0 being lost to background after export
classed_lsat = classed_lsat.remap([0, 1, 2, 3], [1, 2, 3, 4]);
// Recast classified image as 8-bit depth integer
classed_lsat = classed_lsat.toInt8();

// Confusion matrix for classification
var trainAcc = classifier.confusionMatrix();
print('Confusion matrix: ', trainAcc);
print('Training overall accuracy: ', trainAcc.accuracy());
print('Consumers Accuracy', trainAcc.consumersAccuracy());
print('Producers Accuracy', trainAcc.producersAccuracy());
print('Kappa', trainAcc.kappa());

// Draw to map
//Map.setCenter(-94.866,42.967, 8);
//Map.setCenter(-96.37, 48.29, 8);*/
Map.addLayer(cdl_cult);
Map.addLayer(masked_pl, vizParams, "Planet Labs");
//Map.addLayer(classed_lsat, {min:1, max:4, palette:['green', 'yellow', 'red', 'blue']}, "Classification");

//Export image and mask. Uncomment this when ready to export data.
/*Export.image.toCloudStorage({
  image: classed_lsat,
  description: '2013_Classified_Corn_Belt',
  bucket: 'gee_export_kovi',
  fileNamePrefix: '2013/2013_cb_class_randomForest02_int8',
  scale: 3,
  region: champaign,
  maxPixels: 1e13
});*/